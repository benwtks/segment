#!/bin/sh
# MUST BE IN ~/segment ALONG WITH ALL ALGORITHMS IN THEIR FOLDERS

#Segment
#Usage:
#  segment lbp <images> <maps> <number> <destination> <window-size> <max-radius> <no-segments>
#  segment filter-bank <images> <maps> <number> <destination> <window-size> <no-segments>
#  segment lbp-filter-bank <images> <maps> <number> <destination> <window-size> <radius> <bins> <no-segments>
#  segment gmrf <images> <maps> <number> <destination> <neighbourhood> <histogram-size> <bins> <no-segments>
#  segment -h | --help
#Options:
#	-h --help	Show this screen
#

# Boolean to check whether the help screen is needed
show_help=false

# Check whether no parameters were supplied
if [[ $# -eq 0 ]]; then
	show_help=true
fi

# Check if -h or --help is an argument
for var in "$@"; do
	if [[ $var == "-h" ]] || [[ $var == "--help" ]]; then
		show_help=true
	fi
done

# Show help screen  if the conditionals above asked for it
if [[ $show_help == true ]]; then
	echo "Script to queue segmentation algorithms on a dataset"
	echo "Usage:"
	echo "	segment lbp <images> <maps> <number> <destination>               <window-size> <max-radius> <no-segments>"
	echo "	segment filter-bank <images> <maps> <number> <destination>       <window-size> <no-segments>"
	echo "	segment lbp-filter-bank <images> <maps> <number> <destination>   <window-size> <radius> <bins> <no-segments>"
	echo "	segment gmrf <images> <maps> <number> <destination>              <neighbourhood> <histogram-size> <bins> <no-segments>"
	echo -e "	segment -h | --help\n"
	echo "Options:"
	echo -e "	-h --help	Show this screen\n"
	echo -e "Warning: Clears previous output for that algorithm in destination folder\n"
	echo "Assumptions:"
	echo "	- This file is placed in ~/segment"
	echo "	- The script is written specifically for sbatch on a lyceum node"
	echo "	- All algorithms are inside ~/segment/<algorithm>/<algorithm>.py"
	echo "	- You run this script separately for datasets which have a different number of segments"
	echo "	- Images are all .png format and named with indices 1..<number> with maps named to match"
	echo "	- Python is loaded to have all dependencies"
	exit 1
fi


if [[ ! $1 == "lbp" ]] && [[ ! $1 == "filter-bank" ]] && [[ ! $1 == "lbp-filter-bank" ]] && [[ ! $1 == "gmrf" ]]; then
	echo "segment: ${1} is not a supported algorithm"
	echo "Try 'segment -h' for more information"
	exit 1
fi

check_dir_arg () {
	if [[ ! -d "$1" ]]; then
		echo "segment: ${1} is not a directory"
		echo "Try 'segment -h' for more information"
		exit 1
	fi
}

check_int_arg () {
	re='^[0-9]+$' 
	if [[ ! $1 =~ $re ]]; then
		echo "segment: ${1} is not an integer"
		echo "Try 'segment -h' for more information"
		exit 1
	fi
}

check_dir_arg $2 # image dir
check_dir_arg $3 # map dir
check_int_arg $4 # number
check_dir_arg $5 # dest dir

check_int_arg $6 # window-size for all except gmrf, n for gmrf. Should be int for all
check_int_arg $7 # max-radius for lbp, no-segments for filter-bank, radius for lbp-filter-bank, hist size for gmrf

rm ${5}/${1} -rf # clear algorithm dir in dest dir
mkdir ${5}/${1}

original_pwd=$(pwd)

if [[ $1 == "lbp" ]]; then
	check_int_arg $8
	for i in $(seq "$4"); do
		mkdir ${5}/${1}/${i}
		cp ${2}/${i}.png ${5}/${1}/${i}/input.png
		cp ${3}/${i}.png ${5}/${1}/${i}/truth.png
		python_command="python ~/segment/${1}/${1}.py ${5}/${1}/${i}/input.png ${6} ${7} ${8}"
		jaccard_command="python ~/segment/jaccard.py ${8} ${5}/${1}/${i}/output.png ${5}/${1}/${i}/truth.png >> ${5}/${1}/${i}/accuracy.txt"
		echo -e "#!/bin/sh\n#SBATCH --time=59:00:00\n$python_command\n$jaccard_command" > ${5}/${1}/${i}/${1}_script.sh
		cd ${5}/${1}/${i}/
		sbatch -p lyceum ${5}/${1}/${i}/${1}_script.sh
	done
elif [[ $1 == "filter-bank" ]]; then
	for i in $(seq "$4"); do
		mkdir ${5}/${1}/${i}
		cp ${2}/${i}.png ${5}/${1}/${i}/input.png
		cp ${3}/${i}.png ${5}/${1}/${i}/truth.png
		python_command="python ~/segment/${1}/${1}.py ${5}/${1}/${i}/input.png ${6} ${7}"
		jaccard_command="python ~/segment/jaccard.py ${7} ${5}/${1}/${i}/output.png ${5}/${1}/${i}/truth.png >> ${5}/${1}/${i}/accuracy.txt"
		echo -e "#!/bin/sh\n#SBATCH --time=59:00:00\n$python_command\n$jaccard_command" > ${5}/${1}/${i}/${1}_script.sh
		cd ${5}/${1}/${i}/
		sbatch -p lyceum ${5}/${1}/${i}/${1}_script.sh
	done
elif [[ $1 == "lbp-filter-bank" ]]; then
	check_int_arg $8
	check_int_arg $9
	for i in $(seq "$4"); do
		mkdir ${5}/${1}/${i}
		cp ${2}/${i}.png ${5}/${1}/${i}/input.png
		cp ${3}/${i}.png ${5}/${1}/${i}/truth.png
		python_command="python ~/segment/${1}/${1}.py ${5}/${1}/${i}/input.png ${6} ${7} ${8} ${9}"
		jaccard_command="python ~/segment/jaccard.py ${9} ${5}/${1}/${i}/output.png ${5}/${1}/${i}/truth.png >> ${5}/${1}/${i}/accuracy.txt"
		echo -e "#!/bin/sh\n#SBATCH --time=59:00:00\n$python_command\n$jaccard_command" > ${5}/${1}/${i}/${1}_script.sh
		cd ${5}/${1}/${i}/
		sbatch -p lyceum ${5}/${1}/${i}/${1}_script.sh
	done
elif [[ $1 == "gmrf" ]]; then
	check_int_arg $7
	check_int_arg $8
	check_int_arg $9
	for i in $(seq "$4"); do
		mkdir ${5}/${1}/${i}
		cp ${2}/${i}.png ${5}/${1}/${i}/input.png
		cp ${3}/${i}.png ${5}/${1}/${i}/truth.png
		python_command="python ~/segment/${1}/gmrf_pixels.py ${5}/${1}/${i}/input.png ${6} ${7} ${8} ${9}"
		jaccard_command="python ~/segment/jaccard.py ${9} ${5}/${1}/${i}/output.png ${5}/${1}/${i}/truth.png >> ${5}/${1}/${i}/accuracy.txt"
		echo -e "#!/bin/sh\n#SBATCH --time=59:00:00\n$python_command\n$jaccard_command" > ${5}/${1}/${i}/${1}_script.sh
		cd ${5}/${1}/${i}/
		sbatch -p lyceum ${5}/${1}/${i}/${1}_script.sh
	done

fi

cd $original_pwd
echo "Segmentation jobs successfully queued"
